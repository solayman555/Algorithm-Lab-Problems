int binarySearch(int arr[], int size, int target) {
    int left = 0;
    int right = size - 1;
    while (left <= right) {
        int mid = left + (right - left) / 2;
                if (arr[mid] == target)
            return mid;
        if (arr[mid] < target)
            left = mid + 1;
        else
            right = mid - 1;
    }
        return -1; //index return
}
////////sorting
int compare(const void *a, const void *b) {
    return (*(int *)a - *(int *)b);
}
int main() {
 int n = sizeof(arr) / sizeof(arr[0]);
    qsort(arr, n, sizeof(int), compare);
    return 0;
}
//////////max min
int max=arr[0],min=arr[0];
for(int i=1;i<n;i++)
{if(arr[i] > max) max=arr[i];
if(arr[i]< min)min=arr[]i];}
////////sum 21
qsort
 while (left < right) {
            int sum = arr[left] + arr[right];
            if (sum == m) {
                a = arr[left];
                b = arr[right];
                left++;
                right--;
            } else if (sum < m) {
                left++;
            } else {
                right--;
            }
        }

